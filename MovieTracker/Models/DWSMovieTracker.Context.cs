//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MovieTracker.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DWSMovieTrackerEntities : DbContext
    {
        public DWSMovieTrackerEntities()
            : base("name=DWSMovieTrackerEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Actor> Actor { get; set; }
        public virtual DbSet<Genre> Genre { get; set; }
        public virtual DbSet<Movie> Movie { get; set; }
        public virtual DbSet<MovieCast> MovieCast { get; set; }
        public virtual DbSet<MovieGenre> MovieGenre { get; set; }
    
        [DbFunction("DWSMovieTrackerEntities", "SplitString")]
        public virtual IQueryable<SplitString_Result> SplitString(string str, string separator)
        {
            var strParameter = str != null ?
                new ObjectParameter("str", str) :
                new ObjectParameter("str", typeof(string));
    
            var separatorParameter = separator != null ?
                new ObjectParameter("separator", separator) :
                new ObjectParameter("separator", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<SplitString_Result>("[DWSMovieTrackerEntities].[SplitString](@str, @separator)", strParameter, separatorParameter);
        }
    
        public virtual int DeleteMovie(Nullable<int> movieID)
        {
            var movieIDParameter = movieID.HasValue ?
                new ObjectParameter("MovieID", movieID) :
                new ObjectParameter("MovieID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteMovie", movieIDParameter);
        }
    
        public virtual ObjectResult<Movie_Reader_Result> Movie_Reader(string searchString)
        {
            var searchStringParameter = searchString != null ?
                new ObjectParameter("searchString", searchString) :
                new ObjectParameter("searchString", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Movie_Reader_Result>("Movie_Reader", searchStringParameter);
        }
    
        public virtual int Upsert_Movie(Nullable<int> movieID, string title, Nullable<int> movieYear, string movieType, string location, string director, string plot, string poster, string actorString, string genreString)
        {
            var movieIDParameter = movieID.HasValue ?
                new ObjectParameter("MovieID", movieID) :
                new ObjectParameter("MovieID", typeof(int));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var movieYearParameter = movieYear.HasValue ?
                new ObjectParameter("MovieYear", movieYear) :
                new ObjectParameter("MovieYear", typeof(int));
    
            var movieTypeParameter = movieType != null ?
                new ObjectParameter("MovieType", movieType) :
                new ObjectParameter("MovieType", typeof(string));
    
            var locationParameter = location != null ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(string));
    
            var directorParameter = director != null ?
                new ObjectParameter("Director", director) :
                new ObjectParameter("Director", typeof(string));
    
            var plotParameter = plot != null ?
                new ObjectParameter("Plot", plot) :
                new ObjectParameter("Plot", typeof(string));
    
            var posterParameter = poster != null ?
                new ObjectParameter("Poster", poster) :
                new ObjectParameter("Poster", typeof(string));
    
            var actorStringParameter = actorString != null ?
                new ObjectParameter("ActorString", actorString) :
                new ObjectParameter("ActorString", typeof(string));
    
            var genreStringParameter = genreString != null ?
                new ObjectParameter("GenreString", genreString) :
                new ObjectParameter("GenreString", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Upsert_Movie", movieIDParameter, titleParameter, movieYearParameter, movieTypeParameter, locationParameter, directorParameter, plotParameter, posterParameter, actorStringParameter, genreStringParameter);
        }
    
        public virtual int UpsertActors(string actorString, Nullable<int> movieID)
        {
            var actorStringParameter = actorString != null ?
                new ObjectParameter("ActorString", actorString) :
                new ObjectParameter("ActorString", typeof(string));
    
            var movieIDParameter = movieID.HasValue ?
                new ObjectParameter("MovieID", movieID) :
                new ObjectParameter("MovieID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpsertActors", actorStringParameter, movieIDParameter);
        }
    
        public virtual int UpsertGenre(string genreString, Nullable<int> movieID)
        {
            var genreStringParameter = genreString != null ?
                new ObjectParameter("GenreString", genreString) :
                new ObjectParameter("GenreString", typeof(string));
    
            var movieIDParameter = movieID.HasValue ?
                new ObjectParameter("MovieID", movieID) :
                new ObjectParameter("MovieID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpsertGenre", genreStringParameter, movieIDParameter);
        }
    }
}
